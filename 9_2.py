# Исходные списки строк
first_strings = ['Elon', 'Musk', 'Programmer', 'Monitors', 'Variable']
second_strings = ['Task', 'Git', 'Comprehension', 'Java', 'Computer', 'Assembler']

# Создание списка длин строк из first_strings при условии, что длина строки >= 5
# Используем списковое включение (list comprehension)
# len(s) возвращает длину строки s
# if len(s) >= 5 фильтрует строки, длина которых меньше 5
first_result = [len(s) for s in first_strings if len(s) >= 5]

# Создание списка пар слов (кортежей) одинаковой длины
# Используются вложенные циклы: внешний перебирает слова из first_strings, внутренний — из second_strings
# Пара (s1, s2) добавляется в список, если длины строк совпадают (len(s1) == len(s2))
second_result = [(s1, s2) for s1 in first_strings for s2 in second_strings if len(s1) == len(s2)]

# Создание словаря, где ключ — строка, значение — длина строки
# Строки берутся из объединенного списка (first_strings + second_strings)
# Включаются только строки с четной длиной (len(s) % 2 == 0)
# {key: value for ...} создаёт словарь из генератора
third_result = {s: len(s) for s in first_strings + second_strings if len(s) % 2 == 0}

# Вывод результатов на консоль
print(first_result)  # Результат: список длин строк длиной >= 5 из first_strings
print(second_result)  # Результат: список пар (кортежей) слов одинаковой длины
print(third_result)  # Результат: словарь строк с четной длиной и их длин

# Пояснения:
# 1. first_result: мы фильтруем строки с длиной >= 5, а затем создаем список их длин.
#    Например, 'Programmer' имеет длину 10, которая >= 5, поэтому она включена.
# 2. second_result: мы создаем список всех пар (кортежей) слов, длины которых совпадают.
#    Например, 'Elon' (длина 4) и 'Task' (длина 4) образуют пару ('Elon', 'Task').
# 3. third_result: строки объединяются из двух списков, а затем фильтруются по четной длине.
#    Например, строка 'Elon' имеет четную длину (4), поэтому добавляется в словарь как ключ, а ее длина — как значение.
