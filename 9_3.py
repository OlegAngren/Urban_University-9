# Исходные списки строк
first = ['Strings', 'Student', 'Computers']  # Список строк на английском
second = ['Строка', 'Урбан', 'Компьютер']   # Список строк на русском

# Генераторная сборка для вычисления разницы длин строк
# Используем zip для объединения пар строк из двух списков
# Условие if len(f) != len(s) исключает пары, где длины строк равны
first_result = (
    abs(len(f) - len(s))  # Вычисляем абсолютную разницу длин строк
    for f, s in zip(first, second)  # Объединяем строки попарно из обоих списков
    if len(f) != len(s)  # Условие: включаем только пары с разными длинами строк
)

# Генераторная сборка для сравнения длин строк без использования zip
# Используем индексы для доступа к строкам в обоих списках
second_result = (
    len(first[i]) == len(second[i])  # Сравниваем длины строк в одинаковых позициях
    for i in range(len(first))  # Перебираем индексы от 0 до длины списка first
)

# Преобразуем генераторы в списки, чтобы увидеть результаты
print(list(first_result))  # Разница длин строк (если длины не равны)
print(list(second_result))  # Результаты сравнения длин строк (True/False)

''' first_result:
Используется функция zip, которая создает пары элементов из двух списков, идущих в одинаковой позиции.
abs(len(f) - len(s)) вычисляет абсолютную разницу длин строк. Например, если длины строк равны 8 и 5, результат будет 3.
Условие if len(f) != len(s) фильтрует только те пары, где длины строк различны.

second_result:
Вместо zip используется индексация через range(len(first)).
Сравниваются строки из двух списков на одинаковых позициях. Если их длины совпадают, результат для этой пары — True, иначе — False.

Преобразование в список:
Генераторные сборки создают последовательности (генераторы), которые вычисляются лениво.
Чтобы отобразить результаты, генераторы преобразуются в списки с помощью функции list().'''